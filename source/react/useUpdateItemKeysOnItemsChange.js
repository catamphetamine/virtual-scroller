import log from '../utility/debug.js'

import useOnChange from './useOnChange.js'

// If the order of the `items` changes, or new `items` get prepended resulting in a "shift":
//
// * Re-generate the React `key` prefix for item elements
//   so that all item components are re-rendered for the new `items` list.
//   That's because item components may have their own internal state,
//   and simply passing another `item` property for an item component
//   might result in bugs, which React would do with its "re-using" policy
//   if the unique `key` workaround hasn't been used.
//
export default function useUpdateItemKeysOnItemsChange(itemsBeingRendered, {
	virtualScroller,
	usesAutogeneratedItemKeys,
	updateItemKeysForNewItems
}) {
	// Update item keys if the items being rendered have changed.
	useOnChange(itemsBeingRendered, (itemsBeingRendered, previousItemsBeingRendered) => {
		if (!usesAutogeneratedItemKeys) {
			return
		}

		log('React: ~ Different `items` are about to be rendered', itemsBeingRendered)

		let shouldUpdateItemKeys = true

		const itemsDiff = virtualScroller.getItemsDiff(previousItemsBeingRendered, itemsBeingRendered)

		// `itemsDiff` will be `undefined` in case of a non-incremental items list change.
		if (itemsDiff) {
			const {
				prependedItemsCount,
				appendedItemsCount
			} = itemsDiff
			if (prependedItemsCount === 0 && appendedItemsCount === 0) {
				log('React: ~ The `items` elements to be rendered are identical to the previously rendered ones')
				// The items order hasn't changed.
				// No need to re-generate the `key` prefix.
				shouldUpdateItemKeys = false
			}
			else if (prependedItemsCount === 0 && appendedItemsCount > 0) {
				log('React: ~ The `items` elements order hasn\'t changed:', appendedItemsCount, 'items have been appended')
				// The item order hasn't changed.
				// No need to re-generate the `key` prefix.
				shouldUpdateItemKeys = false
			}
		}

		// Update React element `key`s for the new set of `items`.
		if (shouldUpdateItemKeys) {
			log('React: ~ Update item `key`s')
			updateItemKeysForNewItems()
		}
	})
}